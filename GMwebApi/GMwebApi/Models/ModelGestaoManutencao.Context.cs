//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GMwebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDGestaoManutencaoEntities : DbContext
    {
        public BDGestaoManutencaoEntities()
            : base("name=BDGestaoManutencaoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Autenticacao> Autenticacao { get; set; }
        public virtual DbSet<Equipamento> Equipamento { get; set; }
        public virtual DbSet<EstadoIntervencao> EstadoIntervencao { get; set; }
        public virtual DbSet<FichaManutencao> FichaManutencao { get; set; }
        public virtual DbSet<GrupoMaquina> GrupoMaquina { get; set; }
        public virtual DbSet<IntervencaoCurativa> IntervencaoCurativa { get; set; }
        public virtual DbSet<IntervencaoPreventiva> IntervencaoPreventiva { get; set; }
        public virtual DbSet<PedidoManutCurativa> PedidoManutCurativa { get; set; }
        public virtual DbSet<PedidoManutPreventiva> PedidoManutPreventiva { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoUtilizador> TipoUtilizador { get; set; }
        public virtual DbSet<Utilizador> Utilizador { get; set; }
    
        public virtual int InsertEq(Nullable<int> iDGrupoM, string numeroSerie, string descr, string marca, string tipo, string dataCompra, string codigoInterno, Nullable<int> estadoEqui, string dataFimAtividade)
        {
            var iDGrupoMParameter = iDGrupoM.HasValue ?
                new ObjectParameter("IDGrupoM", iDGrupoM) :
                new ObjectParameter("IDGrupoM", typeof(int));
    
            var numeroSerieParameter = numeroSerie != null ?
                new ObjectParameter("NumeroSerie", numeroSerie) :
                new ObjectParameter("NumeroSerie", typeof(string));
    
            var descrParameter = descr != null ?
                new ObjectParameter("Descr", descr) :
                new ObjectParameter("Descr", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var dataCompraParameter = dataCompra != null ?
                new ObjectParameter("DataCompra", dataCompra) :
                new ObjectParameter("DataCompra", typeof(string));
    
            var codigoInternoParameter = codigoInterno != null ?
                new ObjectParameter("CodigoInterno", codigoInterno) :
                new ObjectParameter("CodigoInterno", typeof(string));
    
            var estadoEquiParameter = estadoEqui.HasValue ?
                new ObjectParameter("EstadoEqui", estadoEqui) :
                new ObjectParameter("EstadoEqui", typeof(int));
    
            var dataFimAtividadeParameter = dataFimAtividade != null ?
                new ObjectParameter("DataFimAtividade", dataFimAtividade) :
                new ObjectParameter("DataFimAtividade", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEq", iDGrupoMParameter, numeroSerieParameter, descrParameter, marcaParameter, tipoParameter, dataCompraParameter, codigoInternoParameter, estadoEquiParameter, dataFimAtividadeParameter);
        }
    
        public virtual int InsertGMaquina(Nullable<int> codigoInterno, string descr)
        {
            var codigoInternoParameter = codigoInterno.HasValue ?
                new ObjectParameter("CodigoInterno", codigoInterno) :
                new ObjectParameter("CodigoInterno", typeof(int));
    
            var descrParameter = descr != null ?
                new ObjectParameter("Descr", descr) :
                new ObjectParameter("Descr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGMaquina", codigoInternoParameter, descrParameter);
        }
    
        public virtual int InsertIntervencaoCurativa(Nullable<int> iDPedido, Nullable<int> iDEquipamento, Nullable<int> utilizadorIDUser, string descricao, string dataInicioIntervencao, string dataFimIntervencao)
        {
            var iDPedidoParameter = iDPedido.HasValue ?
                new ObjectParameter("IDPedido", iDPedido) :
                new ObjectParameter("IDPedido", typeof(int));
    
            var iDEquipamentoParameter = iDEquipamento.HasValue ?
                new ObjectParameter("IDEquipamento", iDEquipamento) :
                new ObjectParameter("IDEquipamento", typeof(int));
    
            var utilizadorIDUserParameter = utilizadorIDUser.HasValue ?
                new ObjectParameter("UtilizadorIDUser", utilizadorIDUser) :
                new ObjectParameter("UtilizadorIDUser", typeof(int));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("Descricao", descricao) :
                new ObjectParameter("Descricao", typeof(string));
    
            var dataInicioIntervencaoParameter = dataInicioIntervencao != null ?
                new ObjectParameter("DataInicioIntervencao", dataInicioIntervencao) :
                new ObjectParameter("DataInicioIntervencao", typeof(string));
    
            var dataFimIntervencaoParameter = dataFimIntervencao != null ?
                new ObjectParameter("DataFimIntervencao", dataFimIntervencao) :
                new ObjectParameter("DataFimIntervencao", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntervencaoCurativa", iDPedidoParameter, iDEquipamentoParameter, utilizadorIDUserParameter, descricaoParameter, dataInicioIntervencaoParameter, dataFimIntervencaoParameter);
        }
    
        public virtual int InsertPedidoCurativo(Nullable<int> utilizadorIDUser, Nullable<int> iDEquipamento, string descricao, Nullable<int> iDEstadoIntervencao, string dataPedido)
        {
            var utilizadorIDUserParameter = utilizadorIDUser.HasValue ?
                new ObjectParameter("UtilizadorIDUser", utilizadorIDUser) :
                new ObjectParameter("UtilizadorIDUser", typeof(int));
    
            var iDEquipamentoParameter = iDEquipamento.HasValue ?
                new ObjectParameter("IDEquipamento", iDEquipamento) :
                new ObjectParameter("IDEquipamento", typeof(int));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("Descricao", descricao) :
                new ObjectParameter("Descricao", typeof(string));
    
            var iDEstadoIntervencaoParameter = iDEstadoIntervencao.HasValue ?
                new ObjectParameter("IDEstadoIntervencao", iDEstadoIntervencao) :
                new ObjectParameter("IDEstadoIntervencao", typeof(int));
    
            var dataPedidoParameter = dataPedido != null ?
                new ObjectParameter("DataPedido", dataPedido) :
                new ObjectParameter("DataPedido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPedidoCurativo", utilizadorIDUserParameter, iDEquipamentoParameter, descricaoParameter, iDEstadoIntervencaoParameter, dataPedidoParameter);
        }
    
        public virtual int InsertUtilizador(Nullable<int> iDTipo, Nullable<int> numeroUtilizador, string nome, Nullable<int> estadoAtividade, string dataInativacao)
        {
            var iDTipoParameter = iDTipo.HasValue ?
                new ObjectParameter("IDTipo", iDTipo) :
                new ObjectParameter("IDTipo", typeof(int));
    
            var numeroUtilizadorParameter = numeroUtilizador.HasValue ?
                new ObjectParameter("NumeroUtilizador", numeroUtilizador) :
                new ObjectParameter("NumeroUtilizador", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var estadoAtividadeParameter = estadoAtividade.HasValue ?
                new ObjectParameter("EstadoAtividade", estadoAtividade) :
                new ObjectParameter("EstadoAtividade", typeof(int));
    
            var dataInativacaoParameter = dataInativacao != null ?
                new ObjectParameter("DataInativacao", dataInativacao) :
                new ObjectParameter("DataInativacao", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUtilizador", iDTipoParameter, numeroUtilizadorParameter, nomeParameter, estadoAtividadeParameter, dataInativacaoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
